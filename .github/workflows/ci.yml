name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Linter
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: "."
        
    - name: Run Semgrep Security Scanner
      uses: securecodewarrior/github-action-semgrep@v1
      with:
        config: "auto"

  lint-scripts:
    runs-on: ubuntu-latest
    name: Lint Scripts
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black
        
    - name: Lint Python scripts
      run: |
        flake8 scripts/ tools/ --count --select=E9,F63,F7,F82 --show-source --statistics
        pylint scripts/ tools/ --disable=all --enable=unused-variable,undefined-variable
        
    - name: Check Python formatting
      run: |
        black --check scripts/ tools/

  validate-configs:
    runs-on: ubuntu-latest
    name: Validate Configurations
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate YAML files
      uses: ibiqlik/action-yamllint@v3
      with:
        config_file: .yamllint.yml
        file_or_dir: templates/
        
    - name: Validate JSON files
      run: |
        find . -name "*.json" -exec python -m json.tool {} \; > /dev/null

  test-scripts:
    runs-on: ubuntu-latest
    name: Test Scripts
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        
    - name: Run unit tests
      run: |
        pytest tests/ --cov=scripts/ --cov=tools/ --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  documentation:
    runs-on: ubuntu-latest
    name: Build Documentation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install documentation dependencies
      run: |
        npm install -g @vuepress/cli
        
    - name: Build documentation
      run: |
        # Add documentation build commands here
        echo "Documentation build placeholder"

  powershell-analysis:
    runs-on: windows-latest
    name: PowerShell Analysis
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run PSScriptAnalyzer
      shell: powershell
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        $results = Invoke-ScriptAnalyzer -Path "scripts/" -Recurse -ReportSummary
        if ($results.Count -gt 0) {
          $results | Format-Table
          exit 1
        }

  shell-check:
    runs-on: ubuntu-latest
    name: Shell Script Analysis
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './scripts'
