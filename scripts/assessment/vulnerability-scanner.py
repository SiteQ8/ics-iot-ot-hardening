#!/usr/bin/env python3
"""
ICS Vulnerability Scanner

Performs vulnerability assessment for ICS devices by checking open ports, default credentials,
known CVEs via banner grabbing, and firmware version comparisons.

Author: Ali AlEnezi
License: MIT
Version: 1.0.0
"""

import argparse
import logging
import json
import threading
from queue import Queue
from typing import List, Dict, Any
from datetime import datetime
import re

import nmap

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Sample default credentials mapping
DEFAULT_CREDENTIALS = {
    'modbus': [('admin', 'admin'), ('root', '')],
    'dnp3': [('admin', 'admin')],
    'enip': [('admin', 'password')]
}

# Known CVEs by service/banner patterns
CVE_DB = {
    'Apache.*': ['CVE-2019-0211', 'CVE-2020-9490'],
    'OpenSSH.*': ['CVE-2018-15473'],
    'profinet': ['CVE-2019-12745']
}


class VulnerabilityScanner:
    def __init__(self, targets: List[str], threads: int = 10):
        self.targets = targets
        self.threads = threads
        self.queue = Queue()
        self.results = []
        self.results_lock = threading.Lock()
        self.nm = nmap.PortScanner()

    def scan_target(self, target: str):
        logger.info(f"Scanning {target}")
        try:
            scan = self.nm.scan(target, '1-1024', arguments='-sV -Pn')
            host_data = scan.get('scan', {}).get(target, {})
            tcp_ports = host_data.get('tcp', {})

            if not tcp_ports:
                logger.warning(f"No TCP ports found for {target}")
                return

            for port, port_data in tcp_ports.items():
                service = port_data.get('name', '')
                banner = f"{port_data.get('product', '')} {port_data.get('version', '')}".strip()
                vulns = self.check_cves(banner)
                default_creds = self.check_default_credentials(service)

                with self.results_lock:
                    self.results.append({
                        'target': target,
                        'port': port,
                        'service': service,
                        'banner': banner,
                        'cves': vulns,
                        'default_creds': default_creds
                    })
        except Exception as e:
            logger.error(f"Error scanning {target}: {e}")

    @staticmethod
    def check_cves(banner: str) -> List[str]:
        found = []
        for pattern, cves in CVE_DB.items():
            if re.search(pattern, banner, re.IGNORECASE):
                found.extend(cves)
        return list(set(found))

    @staticmethod
    def check_default_credentials(service: str) -> List[Dict[str, Any]]:
        creds = DEFAULT_CREDENTIALS.get(service, [])
        results = [{'user': user, 'password': pw, 'valid': False} for user, pw in creds]
        return results

    def worker(self):
        while not self.queue.empty():
            target = self.queue.get()
            self.scan_target(target)
            self.queue.task_done()

    def run(self) -> List[Dict[str, Any]]:
        for t in self.targets:
            self.queue.put(t)

        threads = []
        for _ in range(self.threads):
            thread = threading.Thread(target=self.worker)
            thread.start()
            threads.append(thread)

        self.queue.join()
        for thread in threads:
            thread.join()

        return self.results

    def save(self, output: str):
        report = {
            'timestamp': datetime.now().isoformat(),
            'results': self.results
        }
        with open(output, 'w') as f:
            json.dump(report, f, indent=2)
        logger.info(f"Vulnerability report saved to {output}")


def main():
    parser = argparse.ArgumentParser(description='ICS Vulnerability Scanner')
    parser.add_argument('--targets', '-t', nargs='+', required=True, help='List of IPs or hostnames')
    parser.add_argument('--threads', '-n', type=int, default=10, help='Number of threads')
    parser.add_argument('--output', '-o', default='vuln_report.json', help='Output report file')
    args = parser.parse_args()

    scanner = VulnerabilityScanner(args.targets, args.threads)
    results = scanner.run()
    scanner.save(args.output)


if __name__ == '__main__':
    main()
